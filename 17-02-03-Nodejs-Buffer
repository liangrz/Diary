Catalog
1.Buffer.from(array)
2.Buffer.from(arrayBuffer, byteOffset , length) 
3.Buffer.from(buffer)//Copy
4.Buffer.from(string, encoding)
5.Buffer.alloc(size, fill, encoding) 

1.Buffer.from(array)//Base:set a Buffer
  Buffer.from(array) = 8位字节为单元的内容
  Buffer.from('buffer');//Buffer 62 75 66 66 65 72
  const buf = Buffer.from([0x62, 0x75, 0x66, 0x66, 0x65, 0x72]);
  
PS:A TypeError will be thrown if array is not an Array.

2.Buffer.from(arrayBuffer, byteOffset , length) 

  Explain//
  //arrayBuffer <ArrayBuffer> The .buffer property of a TypedArray or ArrayBuffer
  //byteOffset <Integer> Where to start copying from arrayBuffer. Default: 0
  //length <Integer> How many bytes to copy from arrayBuffer. Default: arrayBuffer.length - byteOffset
  
  Example
  ——————————————————————————————
  const ab = new ArrayBuffer(10);
  const buf = Buffer.from(ab, 0, 2);
  // Prints: 2
  console.log(buf.length);
  ——————————————————————————————

3.Buffer.from(buffer)//Copy

  Explain//
  //buffer <Buffer> An existing Buffer to copy data from
  //Copies the passed buffer data onto a new Buffer instance.
  PS：A TypeError will be thrown if buffer is not a Buffer.
  ————————————————————————————————————————————————————————
  Example:

  const buf1 = Buffer.from('buffer');
  const buf2 = Buffer.from(buf1);

  buf1[0] = 0x61;

  // Prints: auffer
  console.log(buf1.toString());

  // Prints: buffer
  console.log(buf2.toString());
  ————————————————————————————————————————————————————————
 
4.Buffer.from(string, encoding)
  
  Explain//
  //string <String> A string to encode.
  //encoding <String> The encoding of string. Default: 'utf8'
  PS:A TypeError will be thrown if str is not a string.
  
  ————————————————————————————————————————————————————————
  Exmaple:
 
  const buf1 = Buffer.from('this is a tést');
  // Prints: this is a tést
  console.log(buf1.toString());

  // Prints: this is a tC)st
  console.log(buf1.toString('ascii'));

  const buf2 = Buffer.from('7468697320697320612074c3a97374', 'hex');

  // Prints: this is a tést
  console.log(buf2.toString());
  ————————————————————————————————————————————————————————
  
5.Buffer.alloc(size, fill, encoding) 
  
  Explain//
  //size <Integer> The desired length of the new Buffer
  //fill <String> | <Buffer> | <Integer> A value to pre-fill the new Buffer with. Default: 0
  //encoding <String> If fill is a string, this is its encoding. Default: 'utf8'
  PS:the size must be less than or equal to the value of the Max of Buffer(Buffer.kMaxLength).
  Otherwise,the RangeError is thrown.
  ————————————————————————————————————————————————————————
  Exmaple:
  const buf=Buffer.alloc(5);
  
  // Prints: <Buffer 00 00 00 00 00>
  console.log(buf);
  buf.fill('a',utf-8);//default of encoding is 'utf-8'.buf.fill(value,offset,length,encoding)
  console.log(buf);
  // Prints: <Buffer 61 61 61 61 61>
  
  const buf1 = Buffer.alloc(5, 'a');
  
  // Prints: <Buffer 61 61 61 61 61>
  console.log(buf1);
  
  const buf2 = Buffer.alloc(11,'aGVsbG8gd29ybGQ=',base64);
  // Prints: <Buffer 68 65 6c 6c 6f 20 77 6f 72 6c 64>
  console.log(buf);
  ————————————————————————————————————————————————————————
6.Buffer.allocUnsafe(size)
  
  Explain:the different Unsafe and Buffer.alloc  
  
